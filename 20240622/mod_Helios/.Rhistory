fcs.data.dir <- "./Data"
fcs.src.dir <- "./00_source_files"
message.delay.time <- 0
Be.Chatty <- TRUE
source( file.path( fcs.src.dir, "flowcytoscript_startup.r") )
source( file.path( fcs.src.dir, "flowcytoscript_load_runchecks.r") )
source( file.path( fcs.src.dir, "flowcytoscript_define_experiment.r") )
flow.data.filename.all
flow.data.filename.all <- list.files( fcs.data.dir, file.extension )
flow.data.filename.all
flow.data.filename <- grep( paste0( fcs.condition, collapse = "|" ),
flow.data.filename.all, value = TRUE )
sample.name.format <- paste0( "%s.%0", fcs.sample.number.width, "d" )
event.name.format <- paste0( "%s.%0", fcs.event.number.width, "d" )
flow.data.filename.sample <- rep( "", length( flow.data.filename ) )
names( flow.data.filename.sample ) <- flow.data.filename
sample.idx.next <- rep( 1, fcs.condition.n )
names( sample.idx.next ) <- fcs.condition
if (input.file.type==2){
fcs.channel <- channels.filtered$name[ channels.filtered$desc %in% fcs.channel ]
names(fcs.channel) <- fcs.channel.label
flow.data <- lapply( flow.data.filename, function( flow.data.fn ) {
sample.flow.frame <- read.FCS( file.path( fcs.data.dir, flow.data.fn ),
transformation = NULL, truncate_max_range = FALSE )
condition <- fcs.condition[ sapply( fcs.condition, grepl, flow.data.fn ) ]
stopifnot( length( condition ) == 1 )
sample.data <- exprs( sample.flow.frame )
if ( ! all( fcs.channel %in% colnames( sample.data ) ) )
{
cat( sprintf( "File: %s\n", flow.data.fn ) )
print( sort( fcs.channel[
! fcs.channel %in% colnames( sample.data ) ] ) )
print( sort( colnames( sample.data ) ) )
stop( "mismatch in names of fcs channels" )
}
sample.name <- sprintf( sample.name.format, condition,
sample.idx.next[ condition ] )
sample.data <- sample.data[ , fcs.channel, drop = FALSE ]
event.n <- nrow( sample.data )
if ( event.n > 0 ) {
event.name <- sprintf( event.name.format, sample.name, 1 : event.n )
rownames( sample.data ) <- event.name
}
flow.data.filename.sample[ flow.data.fn ] <<- sample.name
sample.idx.next[ condition ] <<- sample.idx.next[ condition ] + 1
sample.data
} )
}else{
flow.data <- lapply( flow.data.filename, function( flow.data.fn ) {
sample.data <- as.matrix(fread( file.path( fcs.data.dir, flow.data.fn ), check.names = TRUE ))
condition <- fcs.condition[ sapply( fcs.condition, grepl, flow.data.fn ) ]
stopifnot( length( condition ) == 1 )
if ( ! all( fcs.channel %in% colnames( sample.data ) ) )
{
cat( sprintf( "File: %s\n", flow.data.fn ) )
print( sort( fcs.channel[
! fcs.channel %in% colnames( sample.data ) ] ) )
print( sort( colnames( sample.data ) ) )
cat("Channel mismatch error\n
Please check that your files were all run with the same flow panel and try again.\n")
Sys.sleep(message.delay.time*2)
stop( "mismatch in names of channels" )
}
sample.name <- sprintf( sample.name.format, condition,
sample.idx.next[ condition ] )
sample.data <- sample.data[ , fcs.channel, drop = FALSE ]
event.n <- nrow( sample.data )
if ( event.n > 0 ) {
event.name <- sprintf( event.name.format, sample.name, 1 : event.n )
rownames( sample.data ) <- event.name
}
flow.data.filename.sample[ flow.data.fn ] <<- sample.name
sample.idx.next[ condition ] <<- sample.idx.next[ condition ] + 1
sample.data
} )
}
source( file.path( fcs.src.dir, "flowcytoscript_define_experiment.r") )
source( file.path( fcs.src.dir, "flowcytoscript_clustering.r") )
source( file.path( fcs.src.dir, "flowcytoscript_run_analysis.r") )
dmrd.data.long
transformation.plot
range(dmrd.data.long$value)
if ( grepl("CYTOF|HELIOS", flowFrame@description$`$CYT`) == TRUE ){
transformation.plot <- ggplot( dmrd.data.long,
aes(x = value, y = after_stat(count) ))+
geom_density(fill='black', alpha = 0.4) +
theme_classic()+
facet_wrap(~parameter, scales = "free")+
coord_cartesian(xlim = c(0,15))+
xlab("Channel")
} else {
transformation.plot <- ggplot( dmrd.data.long,
aes(x = value, y = after_stat(count) ))+
geom_density(fill='black', alpha = 0.4) +
theme_classic()+
facet_wrap(~parameter, scales = "free")+
coord_cartesian(xlim = c(-50,1000))+
xlab("Channel")
}
transformation.plot
if ( grepl("CYTOF|HELIOS", flowFrame@description$`$CYT`) == TRUE ){
transformation.plot <- ggplot( dmrd.data.long,
aes(x = value, y = after_stat(count) ))+
geom_density(fill='black', alpha = 0.4) +
theme_classic()+
facet_wrap(~parameter, scales = "free")+
coord_cartesian(xlim = c(0,12))+
xlab("Channel")
} else {
transformation.plot <- ggplot( dmrd.data.long,
aes(x = value, y = after_stat(count) ))+
geom_density(fill='black', alpha = 0.4) +
theme_classic()+
facet_wrap(~parameter, scales = "free")+
coord_cartesian(xlim = c(-50,1000))+
xlab("Channel")
}
transformation.plot
ggsave(
file.path( fcs.density.figure.dir,
"transformed_fcs_data.jpg" ),
transformation.plot,
width = fcs.density.figure.width.base * ( fcs.channel.n + 1 )*1.2,
height = fcs.density.figure.height.base *100
)
