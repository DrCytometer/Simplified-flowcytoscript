fcs.data.dir <- "./Data"
fcs.src.dir <- "./00_source_files"
message.delay.time <- 0
Be.Chatty <- TRUE
source( file.path( fcs.src.dir, "flowcytoscript_startup.r") )
fcs.data.dir <- "./Data"
fcs.src.dir <- "./00_source_files"
message.delay.time <- 0
Be.Chatty <- TRUE
source( file.path( fcs.src.dir, "flowcytoscript_startup.r") )
fcs.data.dir <- "./Data"
fcs.src.dir <- "./00_source_files"
message.delay.time <- 0
Be.Chatty <- TRUE
source( file.path( fcs.src.dir, "flowcytoscript_startup.r") )
source( file.path( fcs.src.dir, "flowcytoscript_load_runchecks.r") )
source( file.path( fcs.src.dir, "flowcytoscript_define_experiment.r") )
source( file.path( fcs.src.dir, "flowcytoscript_clustering.r") )
source( file.path( fcs.src.dir, "flowcytoscript_run_analysis.r") )
if(!require(Rphenoannoy)){
devtools::install_github("stuchly/Rphenoannoy")
}
if(require(Rphenoannoy)){
devtools::install_github("stuchly/Rphenoannoy")
}
library(Rphenoannoy)
?install.packages
remove.packages(Rphenoannoy)
library(Rphenoannoy)
remove.packages("Rphenoannoy")
library(Rphenoannoy)
if(require(Rphenoannoy)){
devtools::install_github("stuchly/Rphenoannoy")
}
AuroraData.dir <- "./AuroraData"
AuroraData <- read.FCS(list.files(AuroraData.dir, "\\.fcs$", full.names = TRUE)[1],
which.lines = 1:100, truncate_max_range = FALSE)
S8Data.dir <- "./S8data"
S8Data <- read.FCS(list.files(S8Data.dir, "\\.fcs$", full.names = TRUE)[1],
which.lines = 1:100, truncate_max_range = FALSE)
ZE5Data.dir <- "./ZE5data"
ZE5Data <- read.FCS(list.files(ZE5Data.dir, "\\.fcs$", full.names = TRUE)[1],
which.lines = 1:100, truncate_max_range = FALSE)
HeliosData.dir <- "./HeliosData"
HeliosData <- read.FCS(list.files(HeliosData.dir, "\\.fcs$", full.names = TRUE)[1],
which.lines = 1:100, truncate_max_range = FALSE)
AuroraData@description$`$CYT`
S8Data@description$`$CYT`
ZE5Data@description$`$CYT`
?flowCore
if(!require(devtools)){
install.packages("devtools") # If not already installed
}
devtools::install_github("stuchly/Rphenoannoy")
?flowWorkspace
HeliosData@description$`$CYT`
HeliosData@description$`$CYT`
"CYTOF"|"HELIOS" %in% HeliosData@description$`$CYT`
"CYTOF" %in% HeliosData@description$`$CYT`
grepl("CYTOF"|"HELIOS", HeliosData@description$`$CYT`)
grepl("CYTOF|HELIOS", HeliosData@description$`$CYT`)
asinh.transform <- arcsinhTransform(a=1, b=1, c=1)
dmrd.data
apply( dmrd.data, 2, asinh.transform)
asinh.transform <- arcsinhTransform(a=1, b=1/5, c=0)
apply( dmrd.data, 2, asinh.transform)
S8Data@parameters
S8channels <- data.frame(name = unname(pData(parameters(S8Data))$name),
desc = unname(pData(parameters(S8Data))$desc))
S8channels
descs.filtered <- channels$desc[!is.na(S8channels$desc) & S8channels$desc != '-']
S8channels.filtered <- dplyr::filter(S8channels, desc %in% descs.filtered)
S8channels.filtered
area.only <- c("Height", "height", "Width", "width", "-W", "-H", "-T", "<NA>", "NA")
area.only <- channels$desc[]
area.only
S8descs.filtered <- channels$desc[!is.na(S8channels$desc) & S8channels$desc != '-']
S8channels.filtered <- dplyr::filter(S8channels, desc %in% S8descs.filtered)
S8channels.filtered
desc
S8channels
pData(parameters(S8Data))$desc
str(S8channels)
View(S8channels)
S8descs.filtered <- channels$desc[!is.na(S8channels$desc) & S8channels$desc != '-']
S8descs.filtered
S8descs.filtered <- S8channels$desc[!is.na(S8channels$desc) & S8channels$desc != '-']
S8descs.filtered
S8channels.filtered <- dplyr::filter(S8channels, desc %in% S8descs.filtered)
S8channels.filtered
non.area <- c("Height", "height", "Width", "width", "-W", "-H", "-T")
non.area <- c("Height", "height", "Width", "width", "-W", "-H", "-T")
area.channels <- S8channels.filtered$desc[!grepl(paste(non.area, collapse = "|"),
S8channels.filtered$desc)]
area.channels
S8channels.filtered <- dplyr::filter(S8channels.filtered, desc %in% area.channels)
S8channels.filtered
area.channels == S8channels.filtered
S8channels.filtered$desc[!grepl("\*)",
S8channels.filtered$desc[!grepl(")",
S8channels.filtered$desc)]
if(!require(devtools)){
install.packages("devtools") # If not already installed
}
devtools::install_github("JinmiaoChenLab/Rphenograph")
library(FastPG)
library(Rphenoannoy)
library(Rphenograph)
library(FastPG)
library(Rphenograph)
library(Rphenoannoy)
if(require(Rphenoannoy)){
devtools::install_github("stuchly/Rphenoannoy")
}
if(require(Rphenoannoy)){
devtools::install_github("stuchly/Rphenoannoy", force = TRUE)
}
devtools::install_github("stuchly/Rphenoannoy"
force = TRUE)
devtools::install_github("stuchly/Rphenoannoy")
library(Rphenoannoy)
dmrd.data <- read.csv(file = "./AuroraData/GALT_KO_IEL_ALSJ8.3_002_CD8_KLRG1 (CD45.2).csv")
Sys.time(
FastPG::fastCluster(dmrd.data)
)
?fastCluster
Sys.time(
FastPG::fastCluster(data = dmrd.data)
)
Sys.time(
fastCluster(data = dmrd.data)
)
system.time(FastPG::fastCluster(data = dmrd.data))
system.time(FastPG::fastCluster(data = matrix(dmrd.data)))
head(dmrd.data)
class(dmrd.data)
dmrd.data <- as.matrix(dmrd.data)
head(dmrd.data)
system.time(FastPG::fastCluster(data = dmrd.data))
system.time(Rphenoannoy(data = dmrd.data))
system.time(Rphenograph(data = dmrd.data))
?RcppHNSW
?Rphenoannoy
umap.result <- uwot::umap(dmrd.data, n_neighbors = 30,
n_epochs = 500,
n_threads = 0,
n_sgd_threads = 0,
batch = TRUE, verbose = TRUE, ret_model = TRUE,
ret_nn = TRUE, ret_extra = "sigma")
dmrd.knn <- umap.result$nn$euclidean
Rphenograph.out <- Rphenograph( neighborhoodMatix = dmrd.knn$idx )
library(Rphenoannoy)
Rphenograph.out <- Rphenoannoy( neighborhoodMatix = dmrd.knn$idx )
Rphenograph.out <- Rphenoannoy( neighborMatrix = dmrd.knn$idx )
factor(membership(Rphenograph.out[[2]]))
